name: Tracing System CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - 'src/tracing/**'
      - 'tests/tracing/**'
      - 'docker/tracing.Dockerfile'
      - '.github/workflows/tracing-ci.yml'
  pull_request:
    branches: [main]
    paths:
      - 'src/tracing/**'
      - 'tests/tracing/**'
      - 'docker/tracing.Dockerfile'

env:
  NODE_VERSION_MATRIX: '[18, 20, 22]'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/tracing

jobs:
  # Security and code quality checks
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: 'src/tracing'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Lint and format checks
  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint:tracing

      - name: Check Prettier formatting
        run: npm run format:check:tracing

      - name: Run TypeScript type checking
        run: npm run typecheck:tracing

  # Unit and integration tests
  test:
    name: Test (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20, 22]
      fail-fast: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:tracing:unit
        env:
          NODE_ENV: test

      - name: Run integration tests
        run: npm run test:tracing:integration
        env:
          NODE_ENV: test

      - name: Generate coverage report
        run: npm run test:tracing:coverage
        env:
          NODE_ENV: test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: matrix.node-version == '20'
        with:
          file: ./coverage/tracing/lcov.info
          flags: tracing
          name: tracing-coverage
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Store test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-node-${{ matrix.node-version }}
          path: |
            coverage/tracing/
            test-results/tracing/

  # Performance regression testing
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run performance benchmarks
        run: npm run perf:tracing
        env:
          NODE_ENV: production

      - name: Store benchmark results
        uses: benchmark-action/github-action-benchmark@v1
        with:
          tool: 'benchmarkjs'
          output-file-path: benchmark-results/tracing.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true
          alert-threshold: '120%'
          comment-on-alert: true
          fail-on-alert: true

      - name: Upload performance artifacts
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: benchmark-results/

  # Build Docker image
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [security-scan, lint, test]
    permissions:
      contents: read
      packages: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/tracing.Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, performance]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://tracing-staging.claude-flow.dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: ./scripts/deploy-tracing.sh
        env:
          ENVIRONMENT: staging
          IMAGE_TAG: ${{ github.sha }}
          DEPLOY_KEY: ${{ secrets.STAGING_DEPLOY_KEY }}
          KUBE_CONFIG: ${{ secrets.STAGING_KUBE_CONFIG }}

      - name: Run smoke tests
        run: npm run test:tracing:smoke
        env:
          TEST_URL: https://tracing-staging.claude-flow.dev

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, performance, deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://tracing.claude-flow.dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: ./scripts/deploy-tracing.sh
        env:
          ENVIRONMENT: production
          IMAGE_TAG: ${{ github.sha }}
          DEPLOY_KEY: ${{ secrets.PRODUCTION_DEPLOY_KEY }}
          KUBE_CONFIG: ${{ secrets.PRODUCTION_KUBE_CONFIG }}

      - name: Run smoke tests
        run: npm run test:tracing:smoke
        env:
          TEST_URL: https://tracing.claude-flow.dev

      - name: Create GitHub release
        if: success()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: tracing-v${{ github.run_number }}
          release_name: Tracing System Release v${{ github.run_number }}
          body: |
            ## Tracing System Release
            
            **Commit:** ${{ github.sha }}
            **Image:** ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            **Deployed:** ${{ github.event.head_commit.timestamp }}
            
            ### Changes
            ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false

  # Cleanup old images
  cleanup:
    name: Cleanup Old Images
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    steps:
      - name: Delete old package versions
        uses: actions/delete-package-versions@v4
        with:
          package-name: tracing
          package-type: container
          min-versions-to-keep: 10
          delete-only-untagged-versions: true